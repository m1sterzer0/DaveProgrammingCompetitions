package main

type Stack struct {	buf []int; l int }
func NewStack() *Stack { buf := make([]int,0); return &Stack{buf,0} }
func (q *Stack) IsEmpty() bool { return q.l == 0 }
func (q *Stack) Clear() { q.buf = q.buf[:0]; q.l = 0 }
func (q *Stack) Len() int { return q.l }
func (q *Stack) Push(x int) { q.buf = append(q.buf,x); q.l++ }
func (q *Stack) Pop(x int) int { if q.l == 0 { panic("Empty Stack Pop()") }; v := q.buf[q.l-1]; q.l--; q.buf=q.buf[:q.l]; return v }
func (q *Stack) Head() int {if q.l == 0 { panic("Empty Stack Head()") }; return q.buf[q.l-1] }
func (q *Stack) Top() int { return q.Head() }

type Queue struct {	buf []int; 	head,tail,sz,bm,l int }
func NewQueue() *Queue { buf := make([]int,8); return &Queue{buf,0,0,8,7,0} }
func (q *Queue) IsEmpty() bool { return q.l == 0 }
func (q *Queue) Clear() { q.head = 0; q.tail = 0; q.l = 0 }
func (q *Queue) Len() int { return q.l }
func (q *Queue) Push(x int) {
	if q.l == q.sz { q.sizeup()	}
	if q.l > 0 { q.head = (q.head - 1) & q.bm }; q.l++; q.buf[q.head] = x
}
func (q *Queue) Pop() int {
	if q.l == 0 { panic("Empty Queue Pop()") }
	v := q.buf[q.tail]; q.l--
	if q.l > 0 { q.tail = (q.tail - 1) & q.bm } else { q.Clear() }
	return v
}
func (q *Queue) Head() int {if q.l == 0 { panic("Empty Queue Head()") }; return q.buf[q.head] }
func (q *Queue) Tail() int {if q.l == 0 { panic("Empty Queue Tail()") }; return q.buf[q.tail] }
func (q *Queue) sizeup() {
	buf := make([]int, 2*q.sz)
	for i := 0; i < q.l; i++ { buf[i] = q.buf[(q.head+i)&q.bm]	}
	q.buf = buf; q.head = 0; q.tail = q.sz - 1; q.sz = 2 * q.sz; q.bm = q.sz - 1
}

type Deque struct { buf []int; head, tail, sz, bm, l int }
func NewDeque() *Deque { buf := make([]int, 8); return &Deque{buf, 0, 0, 8, 7, 0} }
func (q *Deque) IsEmpty() bool { return q.l == 0 }
func (q *Deque) Clear()      { q.head = 0; q.tail = 0; q.l = 0 }
func (q *Deque) PushFront(x int) {
	if q.l == q.sz { q.sizeup()	}
	if q.l > 0 { q.head = (q.head - 1) & q.bm }; q.l++; q.buf[q.head] = x
}
func (q *Deque) PushBack(x int) {
	if q.l == q.sz { q.sizeup()	}
	if q.l > 0 { q.tail = (q.tail + 1) & q.bm }; q.l++; q.buf[q.tail] = x
}
func (q *Deque) PopFront() int {
	if q.l == 0 { panic("Empty Deque PopFront()") }
	v := q.buf[q.head]; q.l--
	if q.l > 0 { q.head = (q.head + 1) & q.bm } else { q.Clear() }
	return v
}
func (q *Deque) PopBack() int {
	if q.l == 0 { panic("Empty Deque PopBack()") }
	v := q.buf[q.tail]; q.l--
	if q.l > 0 { q.tail = (q.tail - 1) & q.bm } else { q.Clear() }
	return v
}
func (q *Deque) Len() int { return q.l }
func (q *Deque) Head() int { if q.l == 0 { panic("Empty Deque Head()") }; return q.buf[q.head] }
func (q *Deque) Tail() int { if q.l == 0 { panic("Empty Deque Tail()") }; return q.buf[q.tail] }
func (q *Deque) sizeup() {
	buf := make([]int, 2*q.sz)
	for i := 0; i < q.l; i++ { buf[i] = q.buf[(q.head+i)&q.bm]	}
	q.buf = buf; q.head = 0; q.tail = q.sz - 1; q.sz = 2 * q.sz; q.bm = q.sz - 1
}

type MinHeap struct { buf []int; less func(int,int)bool }
func NewMinHeap(f func(int,int)bool) *MinHeap {	buf := make([]int, 0); return &MinHeap{buf,f} }
func (q *MinHeap) IsEmpty() bool { return len(q.buf) == 0 }
func (q *MinHeap) Clear() { q.buf = q.buf[:0] }
func (q *MinHeap) Len() int { return len(q.buf) }
func (q *MinHeap) Push(v int) {	q.buf = append(q.buf, v); q.siftdown(0, len(q.buf)-1) }
func (q *MinHeap) Head() int { return q.buf[0] }
func (q *MinHeap) Pop() int {
	v1 := q.buf[0]; l := len(q.buf)
	if l == 1 { q.buf = q.buf[:0] } else {	l--; q.buf[0] = q.buf[l]; q.buf = q.buf[:l]; q.siftup(0) }
	return v1
}
func (q *MinHeap) Heapify(pri []int) { q.buf=append(q.buf,pri...); n:=len(q.buf); for i:=n/2-1;i>=0;i-- { q.siftup(i) } }
func (q *MinHeap) siftdown(startpos, pos int) {
	newitem := q.buf[pos]
	for pos > startpos { ppos:=(pos-1)>>1; p:=q.buf[ppos]; if !q.less(newitem,p) { break } ;q.buf[pos], pos = p, ppos }
	q.buf[pos] = newitem
}
func (q *MinHeap) siftup(pos int) {
	endpos, startpos, newitem, chpos := len(q.buf), pos, q.buf[pos], 2*pos+1
	for chpos < endpos {
		rtpos := chpos+1; if rtpos < endpos && !q.less(q.buf[chpos],q.buf[rtpos]) {	chpos = rtpos }
		q.buf[pos],pos = q.buf[chpos],chpos; chpos = 2*pos + 1
	}
	q.buf[pos] = newitem; q.siftdown(startpos, pos)
}


// This version good for Point updates and Range queries
type SegTree struct {
	n    int
	size int
	log  int
	op   func(a, b SegTreeElem) SegTreeElem
	e    SegTreeElem
	d    []SegTreeElem
}

func NewSegTree(n int, op func(a, b SegTreeElem) SegTreeElem, e SegTreeElem) *SegTree {
	v := make([]SegTreeElem, n)
	for i := 0; i < n; i++ {
		v[i] = e
	}
	return NewSegTreeVec(v, op, e)
}

func NewSegTreeVec(v []SegTreeElem, op func(a, b SegTreeElem) SegTreeElem, e SegTreeElem) *SegTree {
	n := len(v)
	sz, log := 1, 0
	for n < sz {
		sz <<= 1
		log += 1
	}
	d := make([]SegTreeElem, 2*sz)
	d[0] = e
	for i := 0; i < n; i++ {
		d[sz+i] = v[i]
	}
	st := &SegTree{n, sz, log, op, e, d}
	for i := sz - 1; i >= 1; i-- {
		st.update(i)
	}
	return st
}

func (q *SegTree) Set(p int, v SegTreeElem) {
	p += q.size
	q.d[p] = v
	for i := 1; i <= q.log; i++ {
		q.update(p >> i)
	}
}

func (q *SegTree) Get(p int) SegTreeElem {
	return q.d[p+q.size]
}

func (q *SegTree) Prod(l int, r int) SegTreeElem {
	// We add 1 to right vs. atcoder, as we want to get all the points from l->r inclusive
	if r < l {
		return q.e
	}
	r += 1
	sml, smr := q.e, q.e
	l += q.size
	r += q.size
	for l < r {
		if l&1 != 0 {
			sml = q.op(sml, q.d[l])
			l++
		}
		if r&1 != 0 {
			r--
			smr = q.op(q.d[r], smr)
		}
		l >>= 1
		r >>= 1
	}
	return q.op(sml, smr)
}

func (q *SegTree) Allprod() SegTreeElem {
	return q.d[1]
}

// TODO MaxRight
// TODO MinLeft

func (q *SegTree) update(k int) {
	q.d[k] = q.op(q.d[2*k], q.d[2*k+1])
}
