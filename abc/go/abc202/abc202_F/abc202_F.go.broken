package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

type scanner struct { sc *bufio.Scanner }
func newScanner(input io.Reader) *scanner {
	sc := bufio.NewScanner(input)
	sc.Split(bufio.ScanWords)
	sc.Buffer(make([]byte, 1024), int(1e+9))
	return &scanner{sc}	
}
var rdr = newScanner(os.Stdin)
const BUFSIZE = 10000000
var wrtr = bufio.NewWriterSize(os.Stdout, BUFSIZE)
func gs() string  { rdr.sc.Scan(); return rdr.sc.Text() }
func gi() int     { i,e := strconv.Atoi(gs()); if e != nil {panic(e)}; return i }
func gf() float64 { f,e := strconv.ParseFloat(gs(),64); if e != nil {panic(e)}; return f }
func gbs() []byte { return []byte(gs()) }
func gis(n int) []int  { res := make([]int,n); for i:=0;i<n;i++ { res[i] = gi() }; return res }
func gi2() (int,int) { return gi(),gi() }
func gi3() (int,int,int) { return gi(),gi(),gi() }
func gi4() (int,int,int,int) { return gi(),gi(),gi(),gi() }
func gfs(n int) []float64  { res := make([]float64,n); for i:=0;i<n;i++ { res[i] = gf() }; return res }
func gss(n int) []string  { res := make([]string,n); for i:=0;i<n;i++ { res[i] = gs() }; return res }
func ia(m int) []int { return make([]int,m) }
func iai(m int,v int) []int { a := make([]int,m); for i:=0;i<m;i++ { a[i] = v }; return a }
func twodi(n int,m int,v int) [][]int {
	r := make([][]int,n); for i:=0;i<n;i++ { x := make([]int,m); for j:=0;j<m;j++ { x[j] = v }; r[i] = x }; return r
}
func fill2(m int) ([]int,[]int) { a,b := ia(m),ia(m); for i:=0;i<m;i++ {a[i],b[i] = gi(),gi()}; return a,b }
func fill3(m int) ([]int,[]int,[]int) { a,b,c := ia(m),ia(m),ia(m); for i:=0;i<m;i++ {a[i],b[i],c[i] = gi(),gi(),gi()}; return a,b,c }
func fill4(m int) ([]int,[]int,[]int,[]int) { a,b,c,d := ia(m),ia(m),ia(m),ia(m); for i:=0;i<m;i++ {a[i],b[i],c[i],d[i] = gi(),gi(),gi(),gi()}; return a,b,c,d }
func max(a,b int) int { if a > b { return a }; return b }
func min(a,b int) int { if a > b { return b }; return a }
func tern(cond bool, a int, b int) int { if cond { return a }; return b }
func terns(cond bool, a string, b string) string { if cond { return a }; return b }
func maxarr(a []int) int { ans := a[0]; for _,aa := range(a) { if aa > ans { ans = aa } }; return ans }
func minarr(a []int) int { ans := a[0]; for _,aa := range(a) { if aa < ans { ans = aa } }; return ans }
func sumarr(a []int) int { ans := 0; for _,aa := range(a) { ans += aa }; return ans }
func powmod(a,e,mod int) int { res, m := 1, a; for e > 0 { if e&1 != 0 { res = res * m % mod }; m = m * m % mod; e >>= 1 }; return res }
func powint(a,e int) int { res, m := 1, a; for e > 0 { if e&1 != 0 { res = res * m }; m = m * m; e >>= 1 }; return res }
func gcd(a,b int) int { for b != 0 { t:=b; b=a%b; a=t }; return a }
func gcdExtended(a,b int) (int,int,int) { if a == 0 { return b,0,1 }; gcd,x1,y1 := gcdExtended(b%a,a); return gcd, y1-(b/a)*x1,x1 }
func modinv(a,m int) (int,bool) { g,x,_ := gcdExtended(a,m); if g != 1 { return 0,false }; return (x % m + m) % m,true  }
func makefact(n int,mod int) ([]int,[]int) {
	fact,factinv := make([]int,n+1),make([]int,n+1)
	fact[0] = 1; for i:=1;i<=n;i++ { fact[i] = fact[i-1] * i % mod }
	factinv[n] = powmod(fact[n],mod-2,mod); for i:=n-1;i>=0;i-- { factinv[i] = factinv[i+1] * (i+1) % mod }
	return fact,factinv
}


type PI struct { x,y int }
type TI struct { x,y,z int }
func abs(a int) int { if a < 0 { return -a }; return a }
func dot2(a,b PI) int { return a.x*b.x + a.y*b.y }
func cross2(a,b PI) int { return a.x*b.y - a.y*b.x }
func dot3(a,b TI) int { return a.x*b.x+a.y*b.y+a.x*b.z }
func cross3(a,b TI) TI { return TI{a.y*b.z-a.z*b.y, a.z*b.x-a.x*b.z, a.x*b.y-a.y*b.x} }
func pt2sub(a,b PI) PI { return PI{a.x-b.x,a.y-b.y} }
func pt2add(a,b PI) PI { return PI{a.x+b.x,a.y+b.y} }
func pt2scale(n int, a PI) PI { return PI{n*a.x,n*a.y} }
func area2x(a,b,c PI) int {	return abs(cross2(pt2sub(b,a),pt2sub(c,a))) }

const MOD int = 1_000_000_007

func main() {
	//f1, _ := os.Create("cpu.prof"); pprof.StartCPUProfile(f1); defer pprof.StopCPUProfile()
    defer wrtr.Flush()
	infn := "junk.in"
	if infn == "" && len(os.Args) > 1 {	infn = os.Args[1] }
    if infn != "" {	f, e := os.Open(infn); if e != nil { panic(e) }; rdr = newScanner(f) }
	// Following the code in the solutions.  I need to dig in more to understand the full details
	// of how the triangles are patched in turning a this into a polynomial vs. exponential runtime.
	// I need to work to understand the DP more.
	N := gi(); X,Y := fill2(N); pts := make([]PI,N); for i:=0;i<N;i++ { pts[i] = PI{X[i],Y[i]} }
	pow2 := iai(N+1,1); for i:=1;i<=N;i++ { pow2[i] = 2 * pow2[i-1]; if pow2[i] >= MOD { pow2[i] -= MOD }}
	sort.Slice(pts,func(i,j int)bool{return pts[i].x < pts[j].x || pts[i].x == pts[j].x && pts[i].y < pts[j].y })
	pts2 := make([]PI,0); ans := 0; count := twodi(N,N,0); dp := [80][80][2]int{}
	for leftmost:=0;leftmost<N;leftmost++ {
		pts2 = pts2[:0]
		for i:=leftmost;i<N;i++ { pts2 = append(pts2,pt2sub(pts[i],pts[leftmost])) }
		sort.Slice(pts2,func(i,j int)bool{return cross2(pts2[i],pts2[j]) > 0 })
		for i:=0;i<len(pts2);i++ {
			for j:=i+1;j<len(pts2);j++ {
				count[i][j] = 0
				for k:=i+1;k<j;k++ {
					if cross2(pt2sub(pts2[i],pts2[k]),pt2sub(pts2[j],pts2[k])) > 0 { count[i][j]++ }
				}
			}
		}
		for i:=0;i<len(pts2);i++ {
			for j:=i+1;j<len(pts2);j++ {
				for k:=0;k<2;k++ {
					dp[i][j][k] = 0
				}
			}
		}
		for j:=1;j<len(pts2);j++ { dp[0][j][0] = 1 }
		for i:=0;i<len(pts2);i++ {
			for j:=i+1;j<len(pts2);j++ {
				for k:=0;k<2;k++ {
					for l:=j+1;l<len(pts2);l++ {
						if cross2(pt2sub(pts2[j],pts2[i]),pt2sub(pts2[l],pts2[j])) > 0 {
							kidx := k ^ (cross2(pts2[j],pts2[l]) & 1)
							dp[j][l][kidx] += dp[i][j][k] * pow2[count[j][l]] % MOD
							dp[j][l][kidx] %= MOD
						}
					}
				}
			}
		}
		for i:=1;i<len(pts2);i++ {
			for j:=i+1;j<len(pts2);j++ {
				ans += dp[i][j][0]
			}
		}
		ans %= MOD
	}
	fmt.Println(ans)
}
